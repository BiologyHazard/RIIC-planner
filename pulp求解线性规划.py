import math
from typing import Any

import pulp
import yaml

from 贸易站 import 贸易站数据


def divide(x, y):
    return x / y if y != 0 else 0


def 递归获取变量的值(变量) -> Any:
    try:
        return pulp.value(变量)
    except Exception:
        if isinstance(变量, list):
            return [递归获取变量的值(x) for x in 变量]
        elif isinstance(变量, dict):
            return {k: 递归获取变量的值(v) for k, v in 变量.items()}


# 禁用 pulp 的输出
pulp.LpSolverDefault.msg = False  # type: ignore

无人机相当于秒基础工时 = 180
每秒基础工时生产作战记录 = 1000 / (3 * 3600)
每秒基础工时生产赤金 = 1 / (72 * 60)
每秒基础工时生产源石碎片 = 1 / 3600
每秒基础工时获得合成玉 = 20 / (2 * 3600)
每秒基础工时合成玉贸易站消耗源石碎片 = 2 / (2 * 3600)

# 无人机加速获得物品的数量
无人机加速作战记录获得作战记录 = 无人机相当于秒基础工时 * 每秒基础工时生产作战记录
无人机加速赤金获得赤金 = 无人机相当于秒基础工时 * 每秒基础工时生产赤金
无人机加速源石碎片获得源石碎片 = 无人机相当于秒基础工时 * 每秒基础工时生产源石碎片
无人机加速合成玉获得合成玉 = 无人机相当于秒基础工时 * 每秒基础工时获得合成玉
无人机加速合成玉消耗源石碎片 = 无人机相当于秒基础工时 * 每秒基础工时合成玉贸易站消耗源石碎片


def main():
    # 读取输入
    with open('配置.yaml', 'r', encoding='utf-8') as fp:
        data = yaml.safe_load(fp)

    钱书价值比: float = data['钱书价值比']
    龙门币价值: float = data['龙门币价值']
    作战记录价值: float = 龙门币价值 / 钱书价值比
    信用价值: float = data['信用价值']
    公开招募刷新价值: float = data['公开招募刷新价值']

    钱书需求比下限: float = data['钱书需求比下限']
    钱书需求比上限: float = data['钱书需求比上限']
    基建外每日获取赤金: float = data['基建外每日获取赤金']
    溢出折算系数: float = data['溢出折算系数']
    生产1源石碎片消耗龙门币: float = data['生产1源石碎片消耗龙门币']
    每秒基础工时生产源石碎片消耗龙门币 = 生产1源石碎片消耗龙门币 / 3600
    无人机加速源石碎片消耗龙门币 = 无人机相当于秒基础工时 * 每秒基础工时生产源石碎片消耗龙门币
    每日需求合成玉: float = data['每日需求合成玉']

    候选排班表: list[dict] = []
    排班表数量 = len(data['候选排班表'])
    for 排班表 in data['候选排班表']:
        排班表名称 = 排班表['排班表名称']
        贸易站数量 = len(排班表['贸易站列表'])
        if 贸易站数量 != len(排班表['至少分配无人机用于加速']['龙门币']):
            raise ValueError(f'{排班表名称}的贸易站数量与至少分配无人机用于加速龙门币的贸易站数量不一致')

        贸易站列表: list[贸易站数据] = [
            贸易站数据.new(贸易站['贸易站等级'], 贸易站['但书'], 贸易站['龙舌兰'], 贸易站['裁缝'], 贸易站['贸易站名称'])
            for 贸易站 in 排班表['贸易站列表']
        ]
        候选排班表.append({
            '排班表名称': 排班表名称,
            '贸易站数量': 贸易站数量,
            '贸易站列表': 贸易站列表,
            '每日产出': 排班表['每日产出'],
            '至少分配无人机用于加速': 排班表['至少分配无人机用于加速'],
        })

    # 设未知量
    运行时长比例变量 = [
        pulp.LpVariable(f'运行时长比例_{排班表['排班表名称']}', lowBound=0)
        for 排班表 in 候选排班表
    ]
    无人机加速作战记录比例乘运行时长比例变量 = [
        pulp.LpVariable(f'无人机加速作战记录比例乘运行时长比例_{排班表['排班表名称']}')
        for 排班表 in 候选排班表
    ]
    无人机加速赤金比例乘运行时长比例变量 = [
        pulp.LpVariable(f'无人机加速赤金比例乘运行时长比例_{排班表['排班表名称']}')
        for 排班表 in 候选排班表
    ]
    无人机加速龙门币比例乘运行时长比例变量 = [
        [
            pulp.LpVariable(f'无人机加速龙门币比例乘运行时长比例_{排班表['排班表名称']}_{贸易站.贸易站名称}')
            for 贸易站 in 排班表['贸易站列表']
        ]
        for 排班表 in 候选排班表
    ]
    无人机加速源石碎片比例乘运行时长比例变量 = [
        pulp.LpVariable(f'无人机加速源石碎片比例乘运行时长比例_{排班表['排班表名称']}')
        for 排班表 in 候选排班表
    ]
    无人机加速合成玉比例乘运行时长比例变量 = [
        pulp.LpVariable(f'无人机加速合成玉比例乘运行时长比例_{排班表['排班表名称']}')
        for 排班表 in 候选排班表
    ]

    # 中间变量
    平均每日产出作战记录 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['作战记录'] * 运行时长比例变量[排班表序号]
        + (无人机加速作战记录获得作战记录
           * 候选排班表[排班表序号]['每日产出']['无人机']
           * 无人机加速作战记录比例乘运行时长比例变量[排班表序号])
        for 排班表序号 in range(排班表数量)
    )
    平均每日产出赤金 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['赤金'] * 运行时长比例变量[排班表序号]
        + (无人机加速赤金获得赤金
           * 候选排班表[排班表序号]['每日产出']['无人机']
           * 无人机加速赤金比例乘运行时长比例变量[排班表序号])
        - pulp.lpSum(
            贸易站.每秒基础工时消耗赤金 * 无人机相当于秒基础工时
            * 候选排班表[排班表序号]['每日产出']['无人机']
            * 无人机加速龙门币比例乘运行时长比例变量[排班表序号][贸易站序号]
            for 贸易站序号, 贸易站 in enumerate(候选排班表[排班表序号]['贸易站列表'])
        )
        for 排班表序号 in range(排班表数量)
    )
    平均每日产出龙门币 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['龙门币'] * 运行时长比例变量[排班表序号]
        + pulp.lpSum(
            贸易站.每秒基础工时获得龙门币 * 无人机相当于秒基础工时
            * 候选排班表[排班表序号]['每日产出']['无人机']
            * 无人机加速龙门币比例乘运行时长比例变量[排班表序号][贸易站序号]
            for 贸易站序号, 贸易站 in enumerate(候选排班表[排班表序号]['贸易站列表'])
        )
        - (无人机加速源石碎片消耗龙门币
           * 候选排班表[排班表序号]['每日产出']['无人机']
           * 无人机加速源石碎片比例乘运行时长比例变量[排班表序号])
        for 排班表序号 in range(排班表数量)
    )
    平均每日产出源石碎片 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['源石碎片'] * 运行时长比例变量[排班表序号]
        + (无人机加速源石碎片获得源石碎片
           * 候选排班表[排班表序号]['每日产出']['无人机']
           * 无人机加速源石碎片比例乘运行时长比例变量[排班表序号])
        - (无人机加速合成玉消耗源石碎片
           * 候选排班表[排班表序号]['每日产出']['无人机']
           * 无人机加速合成玉比例乘运行时长比例变量[排班表序号])
        for 排班表序号 in range(排班表数量)
    )
    平均每日产出合成玉 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['合成玉'] * 运行时长比例变量[排班表序号]
        + (无人机加速合成玉获得合成玉
           * 候选排班表[排班表序号]['每日产出']['无人机']
           * 无人机加速合成玉比例乘运行时长比例变量[排班表序号])
        for 排班表序号 in range(排班表数量)
    )
    平均每日产出信用 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['信用'] * 运行时长比例变量[排班表序号]
        for 排班表序号 in range(排班表数量)
    )
    平均每日产出公开招募刷新 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['公开招募刷新'] * 运行时长比例变量[排班表序号]
        for 排班表序号 in range(排班表数量)
    )
    基建综合产出_假设无溢出 = (
        平均每日产出作战记录 * 作战记录价值
        + 平均每日产出龙门币 * 龙门币价值
        + 平均每日产出信用 * 信用价值
        + 平均每日产出公开招募刷新 * 公开招募刷新价值
    )
    基建综合产出_假设作战记录溢出 = (
        平均每日产出龙门币 / 钱书需求比下限 * 作战记录价值
        + (平均每日产出作战记录 - 平均每日产出龙门币 / 钱书需求比下限) * 作战记录价值 * 溢出折算系数
        + 平均每日产出龙门币 * 龙门币价值
        + 平均每日产出信用 * 信用价值
        + 平均每日产出公开招募刷新 * 公开招募刷新价值
    )
    基建综合产出_假设龙门币溢出 = (
        平均每日产出作战记录 * 作战记录价值
        + (平均每日产出作战记录 * 钱书需求比上限) * 龙门币价值
        + (平均每日产出龙门币 - 平均每日产出作战记录 * 钱书需求比上限) * 龙门币价值 * 溢出折算系数
        + 平均每日产出信用 * 信用价值
        + 平均每日产出公开招募刷新 * 公开招募刷新价值
    )

    # 约束条件
    赤金平衡约束条件 = 平均每日产出赤金 + 基建外每日获取赤金 >= 0
    源石碎片平衡约束条件 = 平均每日产出源石碎片 >= 0
    合成玉产出约束条件 = 平均每日产出合成玉 == 每日需求合成玉
    运行时长比例约束条件 = pulp.lpSum(运行时长比例变量[排班表序号] for 排班表序号 in range(排班表数量)) == 1
    无人机加速比例约束条件 = [
        无人机加速作战记录比例乘运行时长比例变量[排班表序号]
        + 无人机加速赤金比例乘运行时长比例变量[排班表序号]
        + pulp.lpSum(无人机加速龙门币比例乘运行时长比例变量[排班表序号])
        + 无人机加速源石碎片比例乘运行时长比例变量[排班表序号]
        + 无人机加速合成玉比例乘运行时长比例变量[排班表序号]
        <=
        运行时长比例变量[排班表序号]
        for 排班表序号 in range(排班表数量)
    ]
    无人机加速作战记录约束条件 = [
        候选排班表[排班表序号]['每日产出']['无人机'] * 无人机加速作战记录比例乘运行时长比例变量[排班表序号]
        >= 候选排班表[排班表序号]['至少分配无人机用于加速']['作战记录'] * 运行时长比例变量[排班表序号]
        for 排班表序号 in range(排班表数量)
    ]
    无人机加速赤金约束条件 = [
        候选排班表[排班表序号]['每日产出']['无人机'] * 无人机加速赤金比例乘运行时长比例变量[排班表序号]
        >= 候选排班表[排班表序号]['至少分配无人机用于加速']['赤金'] * 运行时长比例变量[排班表序号]
        for 排班表序号 in range(排班表数量)
    ]
    无人机加速龙门币约束条件 = [
        候选排班表[排班表序号]['每日产出']['无人机'] * 无人机加速龙门币比例乘运行时长比例变量[排班表序号][贸易站序号]
        >= 候选排班表[排班表序号]['至少分配无人机用于加速']['龙门币'][贸易站序号] * 运行时长比例变量[排班表序号]
        for 排班表序号 in range(排班表数量)
        for 贸易站序号 in range(候选排班表[排班表序号]['贸易站数量'])
    ]
    无人机加速源石碎片约束条件 = [
        候选排班表[排班表序号]['每日产出']['无人机'] * 无人机加速源石碎片比例乘运行时长比例变量[排班表序号]
        >= 候选排班表[排班表序号]['至少分配无人机用于加速']['源石碎片'] * 运行时长比例变量[排班表序号]
        for 排班表序号 in range(排班表数量)
    ]
    无人机加速合成玉约束条件 = [
        候选排班表[排班表序号]['每日产出']['无人机'] * 无人机加速合成玉比例乘运行时长比例变量[排班表序号]
        >= 候选排班表[排班表序号]['至少分配无人机用于加速']['合成玉'] * 运行时长比例变量[排班表序号]
        for 排班表序号 in range(排班表数量)
    ]

    # 把变量和约束条件保存起来，便于后续求解
    变量 = {
        # 未知量
        '运行时长比例': 运行时长比例变量,
        '无人机加速作战记录比例乘运行时长比例': 无人机加速作战记录比例乘运行时长比例变量,
        '无人机加速赤金比例乘运行时长比例': 无人机加速赤金比例乘运行时长比例变量,
        '无人机加速龙门币比例乘运行时长比例': 无人机加速龙门币比例乘运行时长比例变量,
        '无人机加速源石碎片比例乘运行时长比例': 无人机加速源石碎片比例乘运行时长比例变量,
        '无人机加速合成玉比例乘运行时长比例': 无人机加速合成玉比例乘运行时长比例变量,
        # 中间变量
        '平均每日产出作战记录': 平均每日产出作战记录,
        '平均每日产出赤金': 平均每日产出赤金,
        '平均每日产出龙门币': 平均每日产出龙门币,
        '平均每日产出源石碎片': 平均每日产出源石碎片,
        '平均每日产出合成玉': 平均每日产出合成玉,
        '平均每日产出信用': 平均每日产出信用,
        '平均每日产出公开招募刷新': 平均每日产出公开招募刷新,
        '基建综合产出_假设无溢出': 基建综合产出_假设无溢出,
        '基建综合产出_假设作战记录溢出': 基建综合产出_假设作战记录溢出,
        '基建综合产出_假设龙门币溢出': 基建综合产出_假设龙门币溢出,
    }
    约束条件列表 = [
        赤金平衡约束条件,
        源石碎片平衡约束条件,
        合成玉产出约束条件,
        运行时长比例约束条件,
        *无人机加速比例约束条件,
        *无人机加速作战记录约束条件,
        *无人机加速赤金约束条件,
        *无人机加速龙门币约束条件,
        *无人机加速源石碎片约束条件,
        *无人机加速合成玉约束条件,
    ]

    # 定义线性规划问题
    线性规划问题字典 = {
        '假设无溢出': pulp.LpProblem(sense=pulp.LpMaximize),
        '假设作战记录溢出': pulp.LpProblem(sense=pulp.LpMaximize),
        '假设龙门币溢出': pulp.LpProblem(sense=pulp.LpMaximize),
    }
    for 线性规划问题 in 线性规划问题字典.values():
        for 约束条件 in 约束条件列表:
            线性规划问题 += 约束条件

    线性规划问题字典['假设无溢出'] += 基建综合产出_假设无溢出
    线性规划问题字典['假设无溢出'] += 平均每日产出作战记录 * 钱书需求比下限 <= 平均每日产出龙门币
    线性规划问题字典['假设无溢出'] += 平均每日产出龙门币 <= 平均每日产出作战记录 * 钱书需求比上限

    线性规划问题字典['假设作战记录溢出'] += 基建综合产出_假设作战记录溢出
    线性规划问题字典['假设作战记录溢出'] += 平均每日产出作战记录 * 钱书需求比下限 >= 平均每日产出龙门币

    线性规划问题字典['假设龙门币溢出'] += 基建综合产出_假设龙门币溢出
    线性规划问题字典['假设龙门币溢出'] += 平均每日产出作战记录 * 钱书需求比上限 <= 平均每日产出龙门币

    # 求解
    求解状态结果字典 = {}
    for 溢出类型, 线性规划问题 in 线性规划问题字典.items():
        求解状态 = 线性规划问题.solve()
        if 求解状态 not in (pulp.LpStatusOptimal, pulp.LpStatusInfeasible):
            raise ValueError(f'{溢出类型}时求解失败，状态为{pulp.LpStatus[求解状态]}')
        求解结果 = 递归获取变量的值(变量)
        求解结果['基建综合产出'] = 求解结果[f'基建综合产出_{溢出类型}']
        求解状态结果字典[溢出类型] = (求解状态, 求解结果)

    基建综合产出最大值 = -math.inf
    最大结果 = None
    for 溢出类型, (求解状态, 求解结果) in 求解状态结果字典.items():
        if 求解状态 == pulp.LpStatusOptimal:
            if 求解结果['基建综合产出'] > 基建综合产出最大值:
                基建综合产出最大值 = 求解结果['基建综合产出']
                最大结果 = 求解结果
    if 最大结果 is None:
        raise ValueError(f'线性规划问题无解')

    # 输出结果
    print(f'基建综合产出：{最大结果['基建综合产出']:.4f}')
    print(f'钱书产出比：{最大结果['平均每日产出龙门币'] / 最大结果['平均每日产出作战记录']:.4f}')
    print(f'平均每日产出作战记录：{最大结果['平均每日产出作战记录']:.4f}')
    print(f'平均每日产出赤金：{最大结果['平均每日产出赤金']:.4f}')
    print(f'平均每日产出龙门币：{最大结果['平均每日产出龙门币']:.4f}')
    print(f'平均每日产出源石碎片：{最大结果['平均每日产出源石碎片']:.4f}')
    print(f'平均每日产出合成玉：{最大结果['平均每日产出合成玉']:.4f}')
    print(f'平均每日产出信用：{最大结果['平均每日产出信用']:.4f}')
    print(f'平均每日产出公开招募刷新：{最大结果['平均每日产出公开招募刷新']:.4f}')

    for 排班表序号 in range(排班表数量):
        运行时长比例 = 最大结果['运行时长比例'][排班表序号]
        无人机加速作战记录比例 = divide(最大结果['无人机加速作战记录比例乘运行时长比例'][排班表序号], 运行时长比例)
        无人机加速赤金比例 = divide(最大结果['无人机加速赤金比例乘运行时长比例'][排班表序号], 运行时长比例)
        无人机加速龙门币比例 = [
            divide(最大结果['无人机加速龙门币比例乘运行时长比例'][排班表序号][贸易站序号], 运行时长比例)
            for 贸易站序号 in range(候选排班表[排班表序号]['贸易站数量'])
        ]
        无人机加速源石碎片比例 = divide(最大结果['无人机加速源石碎片比例乘运行时长比例'][排班表序号], 运行时长比例)
        无人机加速合成玉比例 = divide(最大结果['无人机加速合成玉比例乘运行时长比例'][排班表序号], 运行时长比例)
        无人机加速作战记录数量 = 无人机加速作战记录比例 * 候选排班表[排班表序号]['每日产出']['无人机']
        无人机加速赤金数量 = 无人机加速赤金比例 * 候选排班表[排班表序号]['每日产出']['无人机']
        无人机加速龙门币数量 = [
            x * 候选排班表[排班表序号]['每日产出']['无人机']
            for x in 无人机加速龙门币比例
        ]
        无人机加速源石碎片数量 = 无人机加速源石碎片比例 * 候选排班表[排班表序号]['每日产出']['无人机']
        无人机加速合成玉数量 = 无人机加速合成玉比例 * 候选排班表[排班表序号]['每日产出']['无人机']
        每日产出作战记录 = (
            候选排班表[排班表序号]['每日产出']['作战记录']
            + 无人机加速作战记录获得作战记录 * 无人机加速作战记录数量
        )
        每日产出赤金 = (
            候选排班表[排班表序号]['每日产出']['赤金']
            + 无人机加速赤金获得赤金 * 无人机加速赤金数量
            - sum(
                贸易站.每秒基础工时消耗赤金 * 无人机相当于秒基础工时 * 无人机加速龙门币数量[贸易站序号]
                for 贸易站序号, 贸易站 in enumerate(候选排班表[排班表序号]['贸易站列表'])
            )
        )
        每日产出龙门币 = (
            候选排班表[排班表序号]['每日产出']['龙门币']
            + sum(
                贸易站.每秒基础工时获得龙门币 * 无人机相当于秒基础工时 * 无人机加速龙门币数量[贸易站序号]
                for 贸易站序号, 贸易站 in enumerate(候选排班表[排班表序号]['贸易站列表'])
            )
            - 无人机加速源石碎片消耗龙门币 * 无人机加速源石碎片数量
        )
        每日产出源石碎片 = (
            候选排班表[排班表序号]['每日产出']['源石碎片']
            + 无人机加速源石碎片获得源石碎片 * 无人机加速源石碎片数量
            - 无人机加速合成玉消耗源石碎片 * 无人机加速合成玉数量
        )
        每日产出合成玉 = (
            候选排班表[排班表序号]['每日产出']['合成玉']
            + 无人机加速合成玉获得合成玉 * 无人机加速合成玉数量
        )
        print()
        print(f'=====  {候选排班表[排班表序号]['排班表名称']}  =====')
        print(f'运行时长比例：{运行时长比例:.2%}')
        print(f'无人机加速作战记录：{无人机加速作战记录数量:.4f} ({无人机加速作战记录比例:.2%})')
        print(f'无人机加速赤金：{无人机加速赤金数量:.4f} ({无人机加速赤金比例:.2%})')
        print('无人机加速龙门币：')
        for 贸易站序号, 贸易站 in enumerate(候选排班表[排班表序号]['贸易站列表']):
            print(f'    {贸易站.贸易站名称}：{无人机加速龙门币数量[贸易站序号]:.4f} ({无人机加速龙门币比例[贸易站序号]:.2%})')
        print(f'无人机加速源石碎片：{无人机加速源石碎片数量:.4f} ({无人机加速源石碎片比例:.2%})')
        print(f'无人机加速合成玉：{无人机加速合成玉数量:.4f} ({无人机加速合成玉比例:.2%})')

        print(f'每日产出作战记录：{每日产出作战记录:.4f}')
        print(f'每日产出赤金：{每日产出赤金:.4f}')
        print(f'每日产出龙门币：{每日产出龙门币:.4f}')
        print(f'每日产出源石碎片：{每日产出源石碎片:.4f}')
        print(f'每日产出合成玉：{每日产出合成玉:.4f}')
        print(f'每日产出信用：{候选排班表[排班表序号]['每日产出']['信用']:.4f}')
        print(f'每日产出公开招募刷新：{候选排班表[排班表序号]['每日产出']['公开招募刷新']:.4f}')


if __name__ == '__main__':
    main()
