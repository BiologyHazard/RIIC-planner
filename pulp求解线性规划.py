import pulp
import yaml

from 贸易站 import 贸易站数据


def divide(x, y):
    return x / y if y != 0 else 0


pulp.LpSolverDefault.msg = False  # type: ignore

无人机相当于秒基础工时 = 180
每秒基础工时生产作战记录 = 1000 / (3 * 3600)
每秒基础工时生产赤金 = 1 / (72 * 60)
每秒基础工时生产源石碎片 = 1 / 3600
每秒基础工时获得合成玉 = 20 / (2 * 3600)
每秒基础工时合成玉贸易站消耗源石碎片 = 2 / (2 * 3600)

# 无人机加速获得物品的数量
无人机加速作战记录获得作战记录 = 无人机相当于秒基础工时 * 每秒基础工时生产作战记录
无人机加速赤金获得赤金 = 无人机相当于秒基础工时 * 每秒基础工时生产赤金
无人机加速源石碎片获得源石碎片 = 无人机相当于秒基础工时 * 每秒基础工时生产源石碎片
无人机加速合成玉获得合成玉 = 无人机相当于秒基础工时 * 每秒基础工时获得合成玉
无人机加速合成玉消耗源石碎片 = 无人机相当于秒基础工时 * 每秒基础工时合成玉贸易站消耗源石碎片


def main():
    with open('配置 混合.yaml', 'r', encoding='utf-8') as fp:
        data = yaml.safe_load(fp)

    钱书价值比 = data['钱书价值比']
    龙门币价值 = data['龙门币价值']
    作战记录价值 = 龙门币价值 / 钱书价值比
    信用价值 = data['信用价值']
    公开招募刷新价值 = data['公开招募刷新价值']

    钱书需求比 = data['钱书需求比']
    基建外每日获取赤金 = data['基建外每日获取赤金']
    溢出折算系数 = data['溢出折算系数']
    生产1源石碎片消耗龙门币 = data['生产1源石碎片消耗龙门币']
    每秒基础工时生产源石碎片消耗龙门币 = 生产1源石碎片消耗龙门币 / 3600
    无人机加速源石碎片消耗龙门币 = 无人机相当于秒基础工时 * 每秒基础工时生产源石碎片消耗龙门币
    每日需求合成玉 = data['每日需求合成玉']

    候选排班表: list[dict] = []
    排班表数量 = len(data['候选排班表'])
    for 排班表 in data['候选排班表']:
        排班表名称 = 排班表['排班表名称']
        贸易站数量 = len(排班表['贸易站列表'])
        if 贸易站数量 != len(排班表['至少分配无人机用于加速']['龙门币']):
            raise ValueError(f'{排班表名称}的贸易站数量与至少分配无人机用于加速龙门币的贸易站数量不一致')

        贸易站列表: list[贸易站数据] = [
            贸易站数据.new(贸易站['贸易站等级'], 贸易站['但书'], 贸易站['龙舌兰'], 贸易站['裁缝'], 贸易站['贸易站名称'])
            for 贸易站 in 排班表['贸易站列表']
        ]
        候选排班表.append({
            '排班表名称': 排班表['排班表名称'],
            '贸易站数量': 贸易站数量,
            '贸易站列表': 贸易站列表,
            '每日产出': 排班表['每日产出'],
            '至少分配无人机用于加速': 排班表['至少分配无人机用于加速'],
        })

    线性规划问题: pulp.LpProblem = pulp.LpProblem(sense=pulp.LpMaximize)
    变量 = [
        {
            '运行时长比例': pulp.LpVariable(f'运行时长比例_{排班表['排班表名称']}', lowBound=0),
            '无人机加速作战记录比例乘运行时长比例': pulp.LpVariable(f'无人机加速作战记录比例乘运行时长比例_{排班表['排班表名称']}'),
            '无人机加速赤金比例乘运行时长比例': pulp.LpVariable(f'无人机加速赤金比例乘运行时长比例_{排班表['排班表名称']}'),
            '无人机加速龙门币比例乘运行时长比例': [
                pulp.LpVariable(f'无人机加速龙门币比例乘运行时长比例_{排班表['排班表名称']}_{贸易站.贸易站名称}')
                for 贸易站 in 排班表['贸易站列表']
            ],
        }
        for 排班表 in 候选排班表
    ]
    作战记录综合产出 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['作战记录'] * 变量[排班表序号]['运行时长比例']
        + (无人机加速作战记录获得作战记录
           * 候选排班表[排班表序号]['每日产出']['无人机']
           * 变量[排班表序号]['无人机加速作战记录比例乘运行时长比例'])
        for 排班表序号 in range(排班表数量)
    )
    赤金综合产出 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['赤金'] * 变量[排班表序号]['运行时长比例']
        + (无人机加速赤金获得赤金
           * 候选排班表[排班表序号]['每日产出']['无人机']
           * 变量[排班表序号]['无人机加速赤金比例乘运行时长比例'])
        - pulp.lpSum(
            贸易站.每秒基础工时消耗赤金 * 无人机相当于秒基础工时
            * 候选排班表[排班表序号]['每日产出']['无人机']
            * 变量[排班表序号]['无人机加速龙门币比例乘运行时长比例'][贸易站序号]
            for 贸易站序号, 贸易站 in enumerate(候选排班表[排班表序号]['贸易站列表'])
        )
        for 排班表序号 in range(排班表数量)
    )
    龙门币综合产出 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['龙门币'] * 变量[排班表序号]['运行时长比例']
        + pulp.lpSum(
            贸易站.每秒基础工时获得龙门币 * 无人机相当于秒基础工时
            * 候选排班表[排班表序号]['每日产出']['无人机']
            * 变量[排班表序号]['无人机加速龙门币比例乘运行时长比例'][贸易站序号]
            for 贸易站序号, 贸易站 in enumerate(候选排班表[排班表序号]['贸易站列表'])
        )
        for 排班表序号 in range(排班表数量)
    )
    信用综合产出 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['信用'] * 变量[排班表序号]['运行时长比例']
        for 排班表序号 in range(排班表数量)
    )
    公开招募刷新综合产出 = pulp.lpSum(
        候选排班表[排班表序号]['每日产出']['公开招募刷新'] * 变量[排班表序号]['运行时长比例']
        for 排班表序号 in range(排班表数量)
    )
    基建综合产出 = (
        作战记录综合产出 * 作战记录价值
        + 龙门币综合产出 * 龙门币价值
        + 信用综合产出 * 信用价值
        + 公开招募刷新综合产出 * 公开招募刷新价值
    )

    线性规划问题 += 基建综合产出
    线性规划问题 += 赤金综合产出 + 基建外每日获取赤金 >= 0
    线性规划问题 += 作战记录综合产出 * 钱书需求比 == 龙门币综合产出
    线性规划问题 += pulp.lpSum(变量[排班表序号]['运行时长比例'] for 排班表序号 in range(排班表数量)) == 1
    for 排班表序号 in range(排班表数量):
        线性规划问题 += (
            候选排班表[排班表序号]['每日产出']['无人机'] * 变量[排班表序号]['无人机加速作战记录比例乘运行时长比例']
            >= 候选排班表[排班表序号]['至少分配无人机用于加速']['作战记录'] * 变量[排班表序号]['运行时长比例']
        )
        线性规划问题 += (
            候选排班表[排班表序号]['每日产出']['无人机'] * 变量[排班表序号]['无人机加速赤金比例乘运行时长比例']
            >= 候选排班表[排班表序号]['至少分配无人机用于加速']['赤金'] * 变量[排班表序号]['运行时长比例']
        )
        for 贸易站序号 in range(候选排班表[排班表序号]['贸易站数量']):
            线性规划问题 += (
                候选排班表[排班表序号]['每日产出']['无人机'] * 变量[排班表序号]['无人机加速龙门币比例乘运行时长比例'][贸易站序号]
                >= 候选排班表[排班表序号]['至少分配无人机用于加速']['龙门币'][贸易站序号] * 变量[排班表序号]['运行时长比例']
            )
    for 排班表序号 in range(排班表数量):
        线性规划问题 += (
            变量[排班表序号]['无人机加速作战记录比例乘运行时长比例']
            + 变量[排班表序号]['无人机加速赤金比例乘运行时长比例']
            + pulp.lpSum(变量[排班表序号]['无人机加速龙门币比例乘运行时长比例'])
            <=
            变量[排班表序号]['运行时长比例']
        )

    结果 = 线性规划问题.solve()

    print(f'基建综合产出：{pulp.value(基建综合产出):.4f}')
    print(f'作战记录综合产出：{pulp.value(作战记录综合产出):.4f}')
    print(f'赤金综合产出：{pulp.value(赤金综合产出):.4f}')
    print(f'龙门币综合产出：{pulp.value(龙门币综合产出):.4f}')
    print(f'信用综合产出：{pulp.value(信用综合产出):.4f}')
    print(f'公开招募刷新综合产出：{pulp.value(公开招募刷新综合产出):.4f}')

    for 排班表序号 in range(排班表数量):
        print()
        print(f'=====  {排班表['排班表名称']}  =====')
        print(f'运行时长比例：{pulp.value(变量[排班表序号]['运行时长比例']):.2%}')
        print(f'无人机加速作战记录比例：{divide(pulp.value(变量[排班表序号]['无人机加速作战记录比例乘运行时长比例']), pulp.value(变量[排班表序号]['运行时长比例'])):.2%}')
        print(f'无人机加速赤金比例：{divide(pulp.value(变量[排班表序号]['无人机加速赤金比例乘运行时长比例']), pulp.value(变量[排班表序号]['运行时长比例'])):.2%}')
        print('无人机加速龙门币比例：')
        for 贸易站序号, 贸易站 in enumerate(候选排班表[排班表序号]['贸易站列表']):
            print(f'    {贸易站.贸易站名称}：{divide(pulp.value(变量[排班表序号]['无人机加速龙门币比例乘运行时长比例'][贸易站序号]), pulp.value(变量[排班表序号]['运行时长比例'])):.2%}')

        每日产出作战记录 = (
            候选排班表[排班表序号]['每日产出']['作战记录']
            + 无人机加速作战记录获得作战记录
            * 候选排班表[排班表序号]['每日产出']['无人机']
            * divide(pulp.value(变量[排班表序号]['无人机加速作战记录比例乘运行时长比例']),
                     pulp.value(变量[排班表序号]['运行时长比例']))
        )
        每日产出赤金 = (
            候选排班表[排班表序号]['每日产出']['赤金']
            + 无人机加速赤金获得赤金
            * 候选排班表[排班表序号]['每日产出']['无人机']
            * divide(pulp.value(变量[排班表序号]['无人机加速赤金比例乘运行时长比例']),
                     pulp.value(变量[排班表序号]['运行时长比例']))
            - sum(
                贸易站.每秒基础工时消耗赤金 * 无人机相当于秒基础工时
                * 候选排班表[排班表序号]['每日产出']['无人机']
                * divide(pulp.value(变量[排班表序号]['无人机加速龙门币比例乘运行时长比例'][贸易站序号]),
                         pulp.value(变量[排班表序号]['运行时长比例']))
                for 贸易站序号, 贸易站 in enumerate(候选排班表[排班表序号]['贸易站列表'])
            )
        )
        每日产出龙门币 = (
            候选排班表[排班表序号]['每日产出']['龙门币']
            + sum(
                贸易站.每秒基础工时获得龙门币 * 无人机相当于秒基础工时
                * 候选排班表[排班表序号]['每日产出']['无人机']
                * divide(pulp.value(变量[排班表序号]['无人机加速龙门币比例乘运行时长比例'][贸易站序号]),
                         pulp.value(变量[排班表序号]['运行时长比例']))
                for 贸易站序号, 贸易站 in enumerate(候选排班表[排班表序号]['贸易站列表'])
            )
        )

        print(f'每日产出作战记录：{每日产出作战记录:.4f}')
        print(f'每日产出赤金：{每日产出赤金:.4f}')
        print(f'每日产出龙门币：{每日产出龙门币:.4f}')


if __name__ == '__main__':
    main()
